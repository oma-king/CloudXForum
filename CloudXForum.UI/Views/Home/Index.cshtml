@using System.Text.Json
@using System.Text.Json.Serialization
@model CloudXForum.UI.Models.Home.HomeIndexModel
@{
    ViewData["Title"] = "Home";
}
@* 
<script>
    let notificationCount = @Model.Notifications.Count();
    let notificationListArray = @Html.Raw(JsonSerializer.Serialize(Model.Notifications));

    // Function to update the notification count
    function updateNotificationCount() {
        document.getElementById('notificationCount').innerText = notificationCount.toString();
    }

    // Function to populate the notification list
    function populateNotificationList() {
        const notificationListContainer = document.getElementById('notificationList');

        // Clear existing items
        notificationListContainer.innerHTML = '';

        // Add new items
        notificationListArray.forEach(notification => {
            const notificationItem = document.createElement('li');
            notificationItem.innerHTML = `
                    New Reply "<i>${notification.Content}</i>" on Post <strong>${notification.Title}</strong> by ${notification.UserName}
                    <form asp-controller="Home" asp-action="MarkAsRead" asp-route-repliesFollowupId="${notification.Content}" method="post">
                        <button type="submit">Mark as Read</button>
                    </form>
                `;

            notificationListContainer.appendChild(notificationItem);
        });
    }

    // Function to update notification data and refresh the UI
    function updateNotifications() {
        // Simulated asynchronous call to the server to get updated data
        // Replace this with an actual AJAX call to your server
        setTimeout(() => {
            // Update simulated data (replace with actual data from server)
            notificationCount = @Model.Notifications.Count();
            notificationListArray = @Html.Raw(JsonSerializer.Serialize(Model.Notifications));

            // Update UI
            updateNotificationCount();
            populateNotificationList();
        }, 0);
    }

    // Call the updateNotifications function every 5 seconds
    setInterval(updateNotifications, 5000);

    // Initial call to set up the UI
    updateNotifications();
</script>
 *@
<script>
 
    let notificationListArray = @Html.Raw(Json.Serialize(Model.Notifications));


    // Function to update the notification count
    function updateNotificationCount() {
        document.getElementById('notificationCount').innerText = notificationListArray.length.toString();
    }

    // Function to populate the notification list
    // Function to populate the notification list
function populateNotificationList() {
    const notificationListContainer = document.getElementById('notificationList');

    // Clear existing items
    notificationListContainer.innerHTML = '';

    // Add new items
    notificationListArray.forEach(notification => {
        const notificationItem = document.createElement('li');
        notificationItem.classList.add('dropdown-item');
        notificationItem.href = '#'; // Add the actual link or action here
        // notificationItem.innerHTML = `
        //                 New Reply "<i>${notification.content}</i>" on Post <strong>${notification.title}</strong> by ${notification.userName}
        //         <form asp-controller="Home" asp-action="MarkAsRead" asp-route-repliesFollowupId="${notification.id}" method="post">
        //         <button type="submit">Mark as Read</button>
        //     </form>
        // `;

            notificationItem.innerHTML = `
        New <a href="/Post/Index/${notification.postId}">Reply</a> "<i>${notification.content}</i>" <br />on Post <strong>${notification.title}</strong> by ${notification.userName}
        <form id="markAsReadForm_${notification.id}" asp-controller="Home" asp-action="MarkAsRead" asp-route-repliesfollowupid="${notification.id}" method="post">
            <button type="button" onclick="markAsRead(${notification.id})">Mark as Read</button>
        </form>
    `;

        // Optionally, you can add more content or styles to each item

        notificationListContainer.appendChild(notificationItem);
    });
}
    function markAsRead(notificationId) {
        $.ajax({
            url: `/Home/MarkAsRead?repliesFollowupId=${notificationId}`,
            type: 'POST',
            success: function () {
                // Handle success (optional)
                updateNotifications();
            },
            error: function (error) {
                console.error('Error marking as read:', error);
            }
        });
    }

    // Function to update notification data and refresh the UI
    function updateNotifications() {
        // Actual AJAX call using Fetch API
        fetch('/Home/GetUpdatedNotifications', {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
            },
        })
            .then(response => response.json())
            .then(data => {
                // Update data
                notificationListArray = data;

                // Update UI
                updateNotificationCount();
                populateNotificationList();
            })
            .catch(error => {
                console.error('Error fetching notifications:', error);
            });
    }

    // Call the updateNotifications function every 5 seconds
    setInterval(updateNotifications, 5000);

    // Initial call to set up the UI
    updateNotifications();
</script>

<div class="container body-content">
    <div class="row frontPageSplash">
        <div class="frontPageLearn">
            <div class="frontPageHeading">Welcome</div>
            <div>
                <p class="frontPageSubHeading">CloudX - Elevating Ideas Together!</p>
            </div>
            <div class="col-md-6">
                <form asp-controller="Search" asp-action="Search" method="post">
                    <input asp-for="SearchQuery" type="text" class="homeSearch" placeholder="Search..." />
                </form>
            </div>
        </div>
        <div class="col-md-6">
        </div>
    </div>
    <div class="row frontPageContent">
        <h3 id="popularForums">POPULAR CATEGORIES</h3>
        <table class="table table-hover" id="popularForumsTable">
            <tbody>
            @foreach (var forum in Model.PopularForums)
            {
                <tr>
                    <td>
                        <div class="forumLogo" style="background-image: url(@forum.ImageUrl)"></div>
                        <div class="forumData">
                            <div class="forumTitle">
                                <a asp-controller="Forum" asp-action="Topic" asp-route-id="@forum.Id">@forum.Name</a>
                            </div>
                            <div class="forumSubTitle">
                                @if (forum.HasRecentPosts)
                                {
                                    <div class="hasRecentPost">Recent</div>
                                }
                            </div>
                        </div>
                    </td>
                    <td>
                        <div class="forumPostCount">
                                @forum.NumberOfPosts Posts
                        </div>
                    </td>
                    <td class="tdDisplayNone">
                        <div class="forumDescription">
                            @forum.Description
                        </div>
                    </td>
                </tr>
            }
            </tbody>
        </table>
    </div>
    <div class="row frontPageContent">
        <h3 id="latestPosts">LATEST TOPICS</h3>
        <table class="table table-hover" id="latestPostsTable">
            <tbody>
            @foreach (var post in Model.LatestPosts)
            {
                <tr>
                    <td>
                        <div class="forumLogo" style="background-image: url(@post.Forum.ImageUrl)">
                        </div>
                        <div class="postTitle">
                            <a asp-controller="Post" asp-action="Index" asp-route-id="@post.Id">
                                @post.Title
                            </a>
                        </div>
                        <div class="postSubTitle">
                            @if (post.RepliesCount == 0)
                            {
                                    <span>No answers</span>
                            }
                            else
                            {
                                    <span>@post.RepliesCount answers</span>
                            }
                            <span class="postUser">
                                <a asp-controller="Profile" asp-action="Detail" asp-route-id="@post.AuthorId">@post.Author</a>
                            </span>
                        </div>
                    </td>
                </tr>
            }
            </tbody>
        </table>
    </div>
</div>